generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Content {
  author    String
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  title     String
  pages     Page[]
}

model Course {
  createdAt      DateTime     @default(now())
  id             String       @id @default(cuid())
  name           String
  suggestedLevel GradeLevel
  students       Student[]
  contents       Content[]
  instructors    Instructor[]
  lessonPlan     LessonPlan
}

model Guardian {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  email     String    @unique
  students  Student[]
  user      User
}

model Instructor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  courses   Course[]
  user      User
}

model Page {
  createdAt DateTime @default(now())
  data      String
  id        String   @id @default(cuid())
  content   Content
}

model Student {
  createdAt  DateTime   @default(now())
  gradeLevel GradeLevel
  id         String     @id @default(cuid())
  guardians  Guardian[]
  courses    Course[]
  user       User
}

enum GradeLevel {
  FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  user      User
}

model User {
  id         String      @id @default(cuid())
  username   String      @unique
  password   String
  firstName  String
  lastName   String
  admin      Admin?
  guardian   Guardian?
  instructor Instructor?
  student    Student?
}

model MultipleChoiceQuestionBlock {
  id            String                   @id @default(cuid())
  text          String
  choices       MultipleChoiceQuestionChoice[]   @relation("MultipleChoiceQuestionToAvailableMultipleChoiceQuestionChoice")
  correctChoice MultipleChoiceQuestionChoice
  responses     MultipleChoiceQuestionResponse[]
}

model MultipleChoiceQuestionResponse {
  id      String               @id @default(cuid())
  choice  MultipleChoiceQuestionChoice
  student Student
}

model MultipleChoiceQuestionChoice {
  id       String                      @id @default(cuid())
  text     String
  question MultipleChoiceQuestionBlock
}

model Slide {
  id           String        @id @default(cuid())
  title        String
  singleSlide  SingleSlide?
  quarterSlide QuarterSlide?
  halfSlide    HalfSlide?
}

model SingleSlide {
  id    String @id @default(cuid())
  block Block
}

model QuarterSlide {
  id        String @id @default(cuid())
  mainBlock Block  @relation("QuarterSlideToMainBlock")
  sideBlock Block
}

model HalfSlide {
  id              String @id @default(cuid())
  firstHalfBlock  Block  @relation("HalfSlideToFirstHalfBlock")
  secondHalfBlock Block
}

model Block {
  id                          String                       @id @default(cuid())
  multipleChoiceQuestionBlock MultipleChoiceQuestionBlock?
  textBlock                   TextBlock?
  halfSlidesImplementing      HalfSlide[]
  quarterSlidesImplementing   QuarterSlide[]
}

model TextBlock {
  id    String  @id @default(cuid())
  title String
  body  String
}

model Lesson {
  id     String  @id @default(cuid())
  title  String
  slides Slide[]
}

model LessonPlan {
  id      String   @id @default(cuid())
  lessons Lesson[]
  course  Course
}